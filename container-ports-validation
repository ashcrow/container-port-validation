#!/usr/bin/env ruby
#
# Created to validate TODO _PUT_BZ_HERE_
#
# This script should not require any ruby libs other than what is in the
# standard library

require 'json'

# The maximum length of container.ports.name
ALLOWED_LENGTH = 14
# The valid structure of container.ports.name
ALLOWED_CHARS = Regexp.new('^[a-z0-9]{1}[a-z0-9\-]*[a-z0-9]{1}[^\-]?$')

# validate verifies that value matches required conventions
#
# Rules of container.ports.name validation:
# * must be less that 15 chars
# * at least one letter
# * only a-z0-9-
# * hyphens can not be leading or trailing or next to eachother
#
# ==== Attributes
#
# * +value+ - Value to validate
#
# ==== Examples
#
# errors = validate("idonoterror")
# errors = validate("-ireturn1error")
# errors = validate("-ireturn2errors")
def validate(value)
    errors = []
    if value.length > ALLOWED_LENGTH
        errors << "Value #{ value } is too long. Max size is #{ ALLOWED_LENGTH }"
    end
    if not ALLOWED_CHARS.match(value)
        errors << "Value #{ value } does not match #{ ALLOWED_CHARS } "
    end
    return errors
end

# list_namespaces lists the namespaces names
#
# ==== Examples
#
# items = list_namespaces
def list_namespaces
    response = %x( oc get -o json namespaces)
    item_list = JSON.parse response
    items = []
    item_list.each { |item|
       item_list << item[:metadata][:name]
    }
    return item_list
end


# list_items returns a list of items from the api
#
# ==== Attributes
#
# * +kind+ - Kind of item to access
# * +namespace+ - Namespace to look in
# ==== Examples
#
# items = list_items('pods', 'mynamespaces')
def list_items(kind, namepsace)
    if namespace.to_s != ''
        response = %x( oc get --namespace=#{ namespace } -o json #{ kind })
    else
        response = %x( oc get -o json #{ kind })
    end
    items = JSON.parse response
    return items[:items]
end

# get_item returns one single item from the api
#
# ==== Attributes
#
# * +kind+ - Kind of item to access
# * +name+ - Name of the item
# * +namespace+ - Namespace to look in
# ==== Examples
#
# item = get_item('rc', 'myrc', 'mynamespace')
def get_item(kind, name, namepsace)
    if namespace.to_s != ''
        response = %x( oc get --namespace=#{ namespace } -o json #{ kind } #{ name })
    else
        response = %x( oc get -o json #{ kind } #{ name })
    end
    return JSON.parse response
end

# main is the main entry point to this script
def main
    has_oc = system( 'oc whoami' )
    if has_oc != true
        puts 'Can not find oc in the PATH. Exiting...'
        exit
    end
    # Where the magic happens
    list_namespaces().each { |namespace|
        # TODO: Loop over daemonsets and templates too?
        ['replicationcontrollers', 'pods'].each { |kind|
           list_items(kind, namespace).each { |name|
               resource = get_item(kind, name, namespace)
               resource[:spec][:template][:spec][:containers].each { |container|
                    container[:ports].each { |port|
                        puts validate(port[:name])
                    }
                }
            }
        }
    }

    # DeploymentConfigs are different
    list_items('deploymentconfigs', nil).each { |items|
        items.each { |dc|
            dc[:spec][:template][:spec][:containers].each { |container|
                container[:ports].each { |port|
                    puts validate(port[:name])
                }
            }
        }
    }

end

# Execute main function
main
