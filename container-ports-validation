#!/usr/bin/env python
#
# Created to validate TODO _PUT_BZ_HERE_
#
# This script should not require any ruby libs other than what is in the
# standard library

import json
import subprocess
import re

# The maximum length of container.ports.name
ALLOWED_LENGTH = 14
# The valid structure of container.ports.name
ALLOWED_CHARS = re.compile('^[a-z0-9]{1}[a-z0-9\-]*[a-z0-9]{1}[^\-]?$')


def validate(value):
    """
    validate verifies that value matches required conventions

    Rules of container.ports.name validation:

    * must be less that 15 chars
    * at least one letter
    * only a-z0-9-
    * hyphens can not be leading or trailing or next to eachother

    :Parameters:
       - `value`: Value to validate
    """
    errors = []
    if len(value) > ALLOWED_LENGTH:
        errors.append("Value %s is too long. Max size is %s" % (
            value, ALLOWED_LENGTH))

    if not ALLOWED_CHARS.match(value):
        errors.append("Value %s does not match %s" % (
            value, ALLOWED_CHARS.pattern))
    return errors


def list_namespaces():
    """
    Returns a list of all namespaces
    """
    response = subprocess.check_output(
        'oc get namespaces -o template --template=\'{{range .items}}{{.metadata.name}}{{"\\n"}}{{end}}\'',
        shell=True)
    return response.split('\n')


def list_items(kind, namespace):
    """
    list_items returns a list of items from the api

    :Parameters:
       - `kind`: Kind of item to access
       - `namespace`: Namespace to look in
    """
    response = subprocess.check_output('oc get -o json %s' % kind, shell=True)
    items = json.loads(response)
    return items.get("items", [])


def get(obj, *path):
    """
    Gets an object

    :Parameters:
       - `obj`: A dictionary structure
       - `path`: All other non-keyword arguments
    """
    o = obj
    for p in path:
        if o.get(p, None) is None:
            return []
        o = o[p]
    return o


def main():
    """
    main is the main entry point to this script
    """
    try:
        print("Checking for oc ...")
        has_oc = subprocess.check_call('oc whoami', shell=True)
    except:
        print('Can not find oc in the PATH. Exiting...')
        raise SystemExit(1)

    # Where the magic happens
    for namespace in list_namespaces():
        for rc in list_items('replicationcontrollers', namespace):
            print("Checking rc %s" % rc["metadata"]["name"])
            # for container in rc["spec"]["template"]["spec"]["containers"]:
            for container in get(rc, "spec", "template", "spec", "containers"):
                # for port in container["ports"]:
                for port in get(container, "ports"):
                    print(validate(port["name"]))

        for pod in list_items('pods', namespace):
            print("Checking pod %s" % pod["metadata"]["name"])
            # for container in pod["spec"]["containers"]:
            for conrainer in get(pod, "spec", "containers"):
                # for port in container["ports"]:
                for port in get(container, "ports"):
                    print(validate(port["name"]))

        for dc in list_items('deploymentconfigs', namespace):
            print("Checking dc %s" % dc["metadata"]["name"])
            # for container in dc["spec"]["template"]["spec"]["containers"]:
            for container in get(dc, "spec", "template", "spec", "containers"):
                # for port in container["ports"]:
                for port in get(container, "ports"):
                    print(validate(port["name"]))


if __name__ == '__main__':
    main()
